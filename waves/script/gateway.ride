{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing Bonds Auction in the Orderbook of Neutrino Protocol 
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}

#------Order statuses------
let NONE = 0
let NEW = 1
let REJECTED = 2
let SUCCESS = 3

let LOCK = 0
let UNLOCK = 1
#-------------------Constructor-------------------------
let AssetIdKey = "asset_id"

#-------------------Keys--------------------------------
let AdminsKey = "admins"
let BftCoefficientKey = "bftCoefficient"

func getRqStatusKey(requestId: String) = "status_" + requestId
func getRqHeightKey(requestId: String) = "height_" + requestId
func getRqTypeKey(requestId: String) = "type_" + requestId
func getRqOwnerKey(requestId: String) = "owner_" + requestId
func getRqTargetKey(requestId: String) = "target_" + requestId
func getRqAmountKey(requestId: String) = "amount_" + requestId

#-------------------Global vars-------------------------
let admins = getStringByKey(AdminsKey).split(",")
let assetId = fromBase58String(getStringByKey(AssetIdKey))
let bftCoefficient = getNumberByKey(BftCoefficientKey)
#-------------------Get functions----------------------
func getRqStatus(requestId: String) = getNumberByKey(getRqStatusKey(requestId))
func getRqType(requestId: String) = getNumberByKey(getRqTypeKey(requestId))
func getRqOwner(requestId: String) = getStringByKey(getRqOwnerKey(requestId))
func getRqTarget(requestId: String) = getStringByKey(getRqTargetKey(requestId))
func getRqAmount(requestId: String) = getNumberByKey(getRqAmountKey(requestId))

#-------------------Callable---------------------------

@Callable(i)
func testFaucet() = {
    TransferSet([
      ScriptTransfer(i.caller, 1000000000, assetId)
    ])
}

@Callable(i)
func createLockRequest(recipient: String) = {
    let pmt = extract(i.payment);
    let requestId = toBase58String(keccak256(fromBase58String(toString(this)) + i.caller.bytes + i.transactionId + toBytes(recipient)))

    if (pmt.assetId != assetId)
        then throw("can use waves only")
    else if(getRqOwner(requestId) != "")
        then throw("request exists")
    else {
            WriteSet([
                DataEntry(getRqStatusKey(requestId), NEW),
                DataEntry(getRqTypeKey(requestId), LOCK),
                DataEntry(getRqOwnerKey(requestId), toString(i.caller)),

                DataEntry(getRqHeightKey(requestId), height),
                DataEntry(getRqTargetKey(requestId), recipient),
                DataEntry(getRqAmountKey(requestId), pmt.amount)
            ])
    }
}

@Callable(i)
func changeStatus(requestHash: String, signsString: String, status: Int) = {
    let signs = signsString.split(",")
    let msg = requestHash + "_" + toString(status)
    let count =  (if sigVerify(toBytes(msg), fromBase58String(signs[0]), fromBase58String(admins[0])) then 1 else 0) +
        (if sigVerify(toBytes(msg), fromBase58String(signs[1]), fromBase58String(admins[1])) then 1 else 0) +
        (if sigVerify(toBytes(msg), fromBase58String(signs[2]), fromBase58String(admins[2])) then 1 else 0) +
        (if sigVerify(toBytes(msg), fromBase58String(signs[3]), fromBase58String(admins[3])) then 1 else 0) +
        (if sigVerify(toBytes(msg), fromBase58String(signs[4]), fromBase58String(admins[4])) then 1 else 0)
    
    if(count < bftCoefficient) 
        then throw("count is less 3")
    else if(getRqOwner(requestHash) == "")
        then throw("request is not exists")
    else if(getRqStatus(requestHash) != NEW)
        then throw("request is not exists")
    else if(status != SUCCESS && status != REJECTED)
        then throw("invalid status")
    else {
        let owner = addressFromStringValue(getRqOwner(requestHash))
        let type = getRqType(requestHash)
        let amount = getRqAmount(requestHash)

        ScriptResult(
            WriteSet([
                DataEntry(getRqStatusKey(requestHash), status)
            ]),
            TransferSet([
                ScriptTransfer(owner, if ((status == REJECTED && type == LOCK) || (status == SUCCESS && type == UNLOCK)) then amount else 0, assetId)
            ])
        )
    }
}

@Callable(i)
func changeStatusTest(requestHash: String, status: Int) = {
    if(getRqOwner(requestHash) == "")
        then throw("request is not exists")
    else if(getRqStatus(requestHash) != NEW)
        then throw("request is not exists")
    else if(status != SUCCESS && status != REJECTED)
        then throw("invalid status")
    else {
        let owner = addressFromStringValue(getRqOwner(requestHash))
        let type = getRqType(requestHash)
        let amount = getRqAmount(requestHash)

        ScriptResult(
            WriteSet([
                DataEntry(getRqStatusKey(requestHash), status)
            ]),
            TransferSet([
                ScriptTransfer(owner, if ((status == REJECTED && type == LOCK) || (status == SUCCESS && type == UNLOCK)) then amount else 0, assetId)
            ])
        )
    }
}

@Callable(i)
func createUnlockRequest(sender: String, amount: Int) = {
    let requestId = toBase58String(keccak256(fromBase58String(toString(this)) + i.caller.bytes + i.transactionId + toBytes(sender) + toBytes(amount)))

    if(getRqOwner(requestId) != "")
        then throw("request exists")
    else {
            WriteSet([
                DataEntry(getRqStatusKey(requestId), NEW),
                DataEntry(getRqTypeKey(requestId), UNLOCK),
                DataEntry(getRqOwnerKey(requestId), toString(i.caller)),

                DataEntry(getRqHeightKey(requestId), height),
                DataEntry(getRqTargetKey(requestId), sender),
                DataEntry(getRqAmountKey(requestId), amount)
            ])
    }
}